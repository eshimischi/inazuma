const fs = require("fs");
const HandleBars = require("handlebars");
const { Collection } = require("@iconify/json-tools");

const icons = {
  mdi: [
    "account",
    "alert-outline",
    "alert-circle-outline",
    "check-circle-outline",
    "chevron-down",
    "chevron-up",
    "clock-outline",
    "close",
    "cog",
    "console",
    "file-tree",
    "filter",
    "folder-search-outline",
    "history",
    "home",
    "information-outline",
    "map-marker",
    "map-marker-distance",
    "menu",
    "minus",
    "plus",
    "reload",
    "content-save"
  ],
  octicon: [
    "diff-added-16",
    "diff-ignored-16",
    "diff-modified-16",
    "diff-removed-16",
    "diff-renamed-16",
    "file-code-16",
    "git-compare-16"
  ],
  carbon: ["drag-horizontal", "drag-vertical"]
};

const data = [];
const iconNames = [];
const collection = new Collection();
Object.keys(icons).forEach((collectionName) => {
  if (!collection.loadIconifyCollection(collectionName)) {
    console.error("[Error] Failed to load iconify collection:", collectionName);
  }
  iconNames.push(...icons[collectionName].map((n) => `${collectionName}:${n}`));
  const iconData = collection.getIcons(icons[collectionName]);
  for (const n of icons[collectionName]) {
    const iconName = `${collectionName}:${n}`;
    if (iconData.icons[n]) {
      iconNames.push(iconName);
    } else {
      console.error("[Error] Icon data not found:", iconName);
    }
  }
  data.push(iconData);
});

if (!fs.existsSync("src/react/generated")) {
  fs.mkdirSync("src/react/generated");
}

fs.writeFileSync("src/react/generated/iconbundle.json", JSON.stringify(data, null, 2));

const templateSource = `// Generated by build/create-iconbundle.js

/* prettier-ignore */
export type IconName = (
{{#each iconNames}}
 | "{{.}}"
{{/each}}
);
`;

const template = HandleBars.compile(templateSource);
fs.writeFileSync("src/react/generated/IconName.d.ts", template({ iconNames }));
